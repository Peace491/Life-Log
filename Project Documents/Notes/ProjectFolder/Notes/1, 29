Starting 3/11 for code review up until 5/10(?) two slots a day 7pm is the first, second comes anytime after that it will be every monday and wednesday as well on fridays for the 3/27, 4 /5, 4/19, 5/3, 5/10. Some of the dates are not solidified and are subject to change.

Email Prof to get onto the list, with the following content:
Feature you want to demo

demo is available on the github

(old way)Composition root examples are in the demo on github

Bootstrapping process: 
Specify all using statements (Library)

Highly recommended to use the Microsoft Extensions Configurations & Options configuration system
Configurations is for the retrieving the data from the source whereas Options is for making an object to interact with the source
Also recommended to use the Extensions DependencyInjection and Hosting libraries
Host is the computer/server that runs your code

WebHost is the very first Host
Generirc Host is the second & third <- use for no web services
.NET WebApplication Host is the fourth and fifth <- Always use this
We need to use WebApplication Host

Configure appConfig
CreateDefaultBuilder <-bootstrapping of a host, is resource intensive
Clear all the sources so host isn’t as resource intensive
Config filename; always chooses the intended environment
Add json file and cmd line; Configuration order matters, latest file entered will be the one that runs

Configure services
Setup configurations -> use the same name so you do not have to hard code it 

Setup dependencies; Dependency injections
Transient - new instance of this service will created <- use this one
Singleton - telling dependency injection engine to create one instance and use only one instance; <- Very rare you will use this 
Scope - use the same instance throughout the entire call; different calls will have different scopes. Avoids deadlocks 

Execute application - execute in the host, host app model will manage all resources; when one app dies other app is fine. If host dies everything dies

The host represent the OS

Built in dependency injection objects- dependency objects that are built in dotnet, don't need to setup in bootstrap

Can use dotnet’s Webapi to start your app
For ease of use use Controller, MinApi <- both are production ready
Controller 
Minapi
Empty



The Web Project is the entry point to the back end


