Recommendation Engine Design Goals 
Jack Pickle 3/12/24

Extensibility:
Take the under of LLI being recommended as some from of input for function, allowing LLI service to generate a varying amount of LLI depending on the development environment, or even by user input in the future. 
Through table design, allow LLI to belong to multiple categories, and allow categories to be added to datamodel by adding to categories table. This will allow the system to be more extensible, functioning even if we decide to implement a new category into our web application. 

Single Responsibility:
I wanted to make sure that my code has a clear separation of concerns, to improve future maintainability, and to make it more usable if the client sees fit to use recommendations into any other part of the application. In this way, I decided to segregate business rule enforcement into a manager class, and keep service logic inside of the microservice itself.

Error Handling: 
I instantiate a logger at many levels in the backend, to pave the way for easier debugging for other developers, and any future workers. In some cases, recoverable failures are still recorded as failures while still outputting information to the front end, allowing the recommendation function to continue functioning in spite of some errors, to ensure our users get their value.

Categories Junction Table Reasoning:
Wanted LLI to have multiple categories, as one users "Mental Health" is another's "Outdoor". Implementing this will improve pool of LLI for RE to select from, since RE selects based off of category. Also allows user form to be dynamic, reacting if any new categories are added.